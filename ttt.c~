#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

#define TRUE 1
#define FALSE 0
#define PLAYERX 'X'
#define PLAYERO 'O'
#define EMPTY_CHAR ' '
#define N 3


void init_board(char board[N][N]);
void print_title();
int player_move(char board[N][N], char player);
int comp_move(char board[N][N], char player);
int enter_grid_move(char board[N][N], char player, int grid_num);
int enter_coord_move(char board[N][N], char player, int x, int y);
void print_board(char board[N][N]);
//
int my_max(char board[N][N], char player);
int my_min(char board[N][N], char player);
// Use the minimax algorithm for the AI
void minimax(char board[N][N], char player);

int main() {
  // Board will be [N][N] and N is defines as 3. So layout will be 3x3
  char board[N][N];
  char choice;
  print_title();

  // Start game:
  // Since this game will be played in VirtualBox, ask user in command line
  while(TRUE) {
    printf("Play as X? (y/n): ");
    scanf("%c", &choice);
    choice = tolower(choice);
    if(choice == 'y' || choice == 'n') {
      choice = (choice == 'y' ? PLAYERX : PLAYERO);
      break;
    }
    printf("Incorrect, choose again\n");
  }

  // Initialize the board (need to set them as empty chars)
  init_board(board);
  print_board(board);

  while(TRUE) {
    if(choice == PLAYERX) {
      if(player_move(board, PLAYERX) == TRUE) 
	break;
      
      if(comp_move(board, PLAYERO) == TRUE)
	break;
      
    
    }else {
      if(comp_move(board, PLAYERX) == TRUE) 
	break;
      
      if(player_move(board, PLAYERO) == TRUE) 
	  break;
    }
  }
  return 0;
}

void init_board(char board[N][N]) {
  int i, j;
  for(i=0; i<N; ++i) {
    for(j=0; j<N; ++j) {
      board[i][j] = EMPTY_CHAR;
    }
  }
}


// NOTE: The board will look like:
//   |1|2|3|
//   |4|5|6|
//   |7|8|9|    // the numbers represent the area of chosen mark
//
// I don't have the references defined yet for some functions, so an error will occur if this is ran. 
//
//
